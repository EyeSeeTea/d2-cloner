import os

from src.preprocess.query_generator import generate_delete_datasets_rules, generate_delete_tracker_rules, \
    generate_delete_event_rules, delete_all_event_programs, delete_all_data_sets, delete_all_tracker_programs, \
    remove_all_unnecessary_dependencies, anonymize_all_event_programs, anonymize_all_data_sets, \
    anonymize_all_tracker_programs, generate_anonymize_tracker_rules, generate_anonymize_event_rules, \
    generate_anonymize_datasets_rules
import shutil

anonymize_rule = "anonymizeData"
remove_rule = "removeData"
program_type = "eventPrograms"
tracker_type = "trackerPrograms"
dataset_type = "dataSets"
metadata_type = "selectMetadataType"
file_name = "preprocess.sql"
actions = "actions"
select_datasets = "selectDatasets"
select_event_program = "selectEventProgram"
select_tracker_program = "selectTrackerProgram"
select_org_units = "selectOrgUnits"
select_org_unit_and_descendants = "selectOrgUnitAndDescendants"
select_data_elements = "selectDataElements"
select_tracked_entity_attributes = "selectTrackedEntityAttributes"
action = "action"
select_departament = "selectDepartament"


def get_file():
    return file_name


def move_file(file, new_folder):
    shutil.move(file, new_folder)


def create_dir_if_not_exists(directory):
    try:
        os.makedirs(directory)
    except FileExistsError:
        # directory already exists
        pass


def preprocess(entries, departments, directory):
    create_dir_if_not_exists(directory)
    f = open(os.path.join(directory, get_file()), "w")
    f.write("-- Autogenerated preprocess sql file" + "\n")
    add_rules_by_departament(departments, entries)
    remove_all_unnecessary_dependencies(f)
    generate_queries(departments, f)
    f.close()


def remove_all(list_uid, f):
    for key in list_uid.keys():
        if key == program_type:
            delete_all_event_programs(list_uid[key], f)
        if key == dataset_type:
            delete_all_data_sets(list_uid[key], f)
        if key == tracker_type:
            delete_all_tracker_programs(list_uid[key], f)


def anonymize_all(list_uid, f):
    for key in list_uid.keys():
        if key == program_type:
            anonymize_all_event_programs(list_uid[key], f)
        if key == dataset_type:
            anonymize_all_data_sets(list_uid[key], f)
        if key == tracker_type:
            anonymize_all_tracker_programs(list_uid[key], f)


def generate_queries(departament, f):
    for key in departament.keys():
        f.write("--" + key + "\n")
        if actions not in departament[key]:
            continue
        for rule in departament[key][actions]:
            has_datasets = False
            has_event_program = False
            has_tracker_program = False
            if rule[action] == remove_rule or rule[action] == anonymize_rule:

                # get metadata types
                if metadata_type in rule.keys():
                    has_datasets = check_if_has_metadata_type(rule, dataset_type)
                    has_event_program = check_if_has_metadata_type(rule, program_type)
                    has_tracker_program = check_if_has_metadata_type(rule, tracker_type)

                # gets uid list if exists
                datasets = get_rule_content(rule, select_datasets)
                event_program = get_rule_content(rule, select_event_program)
                tracker_program = get_rule_content(rule, select_tracker_program)

                # get restriction if exist
                org_units = get_rule_content(rule, select_org_units)
                org_unit_descendants = get_rule_content(rule, select_org_unit_and_descendants)
                data_elements = get_rule_content(rule, select_data_elements)
                tracker_entity_attributes = get_rule_content(rule, select_tracked_entity_attributes)

                if rule[action] == remove_rule:
                    if has_datasets:
                        generate_delete_datasets_rules(datasets, data_elements, org_units,
                                                       org_unit_descendants, departament[key][dataset_type], f)
                    if has_tracker_program:
                        generate_delete_tracker_rules(tracker_program, data_elements, org_units,
                                                      org_unit_descendants, departament[key][tracker_type], f)
                    if has_event_program:
                        generate_delete_event_rules(event_program, data_elements, org_units,
                                                    org_unit_descendants, departament[key][program_type], f)
                    # if not have specific rules apply to all the departament
                    if not has_datasets and not has_event_program and not has_tracker_program:
                        remove_all(departament[key], f)
                elif rule[action] == anonymize_rule:
                    if has_datasets:
                        generate_anonymize_datasets_rules(datasets, data_elements, org_units, org_unit_descendants,
                                                           departament[key][dataset_type], f)
                    if has_tracker_program:
                        generate_anonymize_tracker_rules(tracker_program, tracker_entity_attributes, org_units, data_elements,
                                                         departament[key][tracker_type], f)
                    if has_event_program:
                        generate_anonymize_event_rules(event_program, org_units, data_elements,
                                                       departament[key][program_type], f)
                    # if not have specific rules apply to all the departament
                    if not has_datasets and not has_event_program and not has_tracker_program:
                        anonymize_all(departament[key], f)


def get_rule_content(rule, rule_type):
    if rule_type in rule.keys():
        return rule[rule_type]
    return ""


def check_if_has_metadata_type(rule, check_type):
    for rule_type in rule[metadata_type]:
        if rule_type == check_type:
            return True
    return False


def add_rules_by_departament(departament, entries):
    for entry in entries:
        exist = False
        for key in departament.keys():
            if entry[select_departament].upper() == key.upper():
                if actions not in departament[key].keys():
                    departament[key][actions] = list()
                departament[key][actions].append(entry)
                exist = True
        if not exist:
            print("--unknown departament key for entry:" + entry[select_departament])
